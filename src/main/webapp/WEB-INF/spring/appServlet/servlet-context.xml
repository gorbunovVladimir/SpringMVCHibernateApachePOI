<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
	<!-- DispatcherServlet Context: определяет настройки одного сервлета; бины, 
		которые доступны только ему -->		

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- Разрешаем использование аннотаций Spring MVC (то есть @Controller и.т.д) -->
	<annotation-driven />

    <!-- File Upload bean config-->
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the maximum file size in bytes -->
        <beans:property name="maxUploadSize" value="10000000"/>
    </beans:bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- Всю статику (изображения, css-файлы, javascript) положим в папку webapp/resources 
		и замаппим их на урл вида /resources/** -->		
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- Отображение видов на jsp-файлы, лежащие в папке /WEB-INF/views -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- Непосредственно бин dataSource -->
    <!--<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
        <beans:property name="url"
            value="jdbc:mysql://localhost:3306/hospitalisation?useSSL=false&amp;useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC" />
        <beans:property name="username" value="vladimir" />
        <beans:property name="password" value="123456" />
    </beans:bean>-->

    <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <beans:property name="driverClassName" value="org.postgresql.Driver" />
        <beans:property name="url"
                        value="jdbc:postgresql://localhost:5432/hospitalisation" />
        <beans:property name="username" value="vladimir" />
        <beans:property name="password" value="123456" />
    </beans:bean>

    <!-- Hibernate 5 SessionFactory Bean definition -->
	<!-- Настройки фабрики сессий Хибернейта -->
    <!--<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect-->

    <beans:bean id="hibernate5AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.gorbunov.spring.model.HumanHospitalization</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL82Dialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
                <beans:prop key="connection_pool_size">10</beans:prop>
                <beans:prop key="hbm2ddl.auto">create</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				<beans:prop key="hibernate.format_sql">true</beans:prop>
            </beans:props>
		</beans:property>
	</beans:bean>

    <beans:bean id="humanHospitalizationDAO" class="com.gorbunov.spring.dao.HumanHospitalizationDAOImpl">
        <beans:property name="sessionFactory" ref="hibernate5AnnotatedSessionFactory" />
    </beans:bean>

    <beans:bean id="hospitalizationService" class="com.gorbunov.spring.service.HospitalizationServiceImpl">
    </beans:bean>

	<beans:bean id="importService" class="com.gorbunov.spring.service.ImportServiceImpl">
    </beans:bean>

    <!-- Определяем папки, в которых будем автоматически искать бины-компоненты (@Component, @Service), веб компоненты (контроллеры)  -->
	<!--параметр, указывающий Spring'у, в каком пакете (и подпакетах, соответственно) искать свои аннотации.  -->
	<context:component-scan base-package="com.gorbunov.spring" />
	
	<!-- Настраивает управление транзакциями с помощью аннотации @Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- Менеджер транзакций -->	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate5AnnotatedSessionFactory" />
    </beans:bean>

</beans:beans>
